@page "/weather"
@using ClosedXML.Excel
@* @attribute [StreamRendering] *@
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="WeatherForecast">
        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Align="Align.Start"/>
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Align="Align.Center"/>
        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Align="Align.Center"/>
        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Align="Align.End"/>
    </FluentDataGrid>

    <FluentButton Appearance="Appearance.Accent" @onclick="@ExportExcelOpenXML">Save as Excel</FluentButton>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task ExportExcel()
    {
        var wb = new XLWorkbook();
        wb.Properties.Author = "the Author";
        wb.Properties.Title = "the Title";
        wb.Properties.Subject = "the Subject";

        var ws = wb.Worksheets.Add("Weather Forecast");

        ws.Cell(1, 1).Value = "Temp. (C)";
        ws.Cell(1, 2).Value = "Temp. (F)";
        ws.Cell(1, 3).Value = "Summary";

        // for (int row = 0; row < data.Length; row++)
        // {
        //     ws.Cell(row + 1, 1).Value = data[row].TemperatureC;
        //     ws.Cell(row + 1, 2).Value = data[row].TemperatureF;
        //     ws.Cell(row + 1, 3).Value = data[row].Summary;
        // }

        MemoryStream XLSStream = new();
        wb.SaveAs(XLSStream);
        var fileName = "Weathers.xlsx";
        // await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, XLSStream);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(XLSStream.ToArray()));
    }

    private async Task ExportExcelOpenXML()
    {
        var ms = new MemoryStream();
        // Create a spreadsheet document by supplying the filepath.
        // By default, AutoSave = true, Editable = true, and Type = xlsx.
        SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(ms, SpreadsheetDocumentType.Workbook);

        // Add a WorkbookPart to the document.
        WorkbookPart workbookPart = spreadsheetDocument.AddWorkbookPart();
        workbookPart.Workbook = new Workbook();

        // Add a WorksheetPart to the WorkbookPart.
        WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
        var sheetData = new SheetData();
        worksheetPart.Worksheet = new Worksheet(sheetData);

        // Add Sheets to the Workbook.
        Sheets sheets = workbookPart.Workbook.AppendChild(new Sheets());

        // Append a new worksheet and associate it with the workbook.
        Sheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "mySheet" };
        sheets.Append(sheet);

        workbookPart.Workbook.Save();
        spreadsheetDocument.Save();

        // Dispose the document.
        spreadsheetDocument.Dispose();

        await JSRuntime.InvokeVoidAsync("downloadFile", "Blank.xlsx", Convert.ToBase64String(ms.ToArray()));
    }
}
